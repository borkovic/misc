q=''''
qq='"'
tab='	'
nl='
'

fn c  { clear }
fn ls { builtin ls -hF $* }
fn l  { builtin ls -hF $* }
fn ll { builtin ls -lhF $* }
fn la { builtin ls -ahF $* }

fn true  { return 0 }
fn false { return 1 }
fn Error { echo >[1=2] $* }
fn Fatal { Error $*; exit 1 }

##################################################
## ; A = (w1 x2 y3 z4)
## ; Shift A 2  # shift var A by two positions
## ; whatis A
## ; A=(y3 z4)
##================================================
fn Shift { varName=() nShift=() {
    switch ($#*) {
    case 1
        varName=$1 nShift=1
    case 2
        varName=$1 nShift=$2
    case *
        Error Usage: Shift '<var-name>'  '[<shift-number>]'
        return 1
    }

    * = $($varName)
    shift $nShift
    $varName = $*
}}

##################################################
fn rs { s=() {
    s=${resize | egrep -v export}
    eval $s
}}

##################################################
fn stop {
    kill -STOP $*
}

##################################################
fn cont {
    kill -CONT $*
}

##################################################
fn setPrompt { 
Dirs=0 n=0 n1=0 n2=0 p=0 nc=0 max=0 {

    p = $pwd

    switch ($pwd) {
    case */*/*/*
        let max=$COLUMNS-39
        Dirs = `` / { echo -n $pwd }
        n = $#Dirs
        let n1=$n-1
        let n2=$n-2

        p = $Dirs($n2) ^ / ^ $Dirs($n1) ^ / ^ $Dirs($n)
        nc = ${echo $p | wc -c}
        if (let $nc' > '$max) {
            p = $Dirs($n1) ^ / ^ $Dirs($n)
            nc = ${echo $p | wc -c}
            if (let $nc' > '$max) {
                p = $Dirs($n)
            }
        }
    }

    prompt = ($p^' ; ' $prompt(2))
}}

##################################################
fn cd {
    if (builtin cd $*) {
        ##pwd
        setPrompt
        return 0
    } else {
        return 1
    }
}

##################################################
DIRSTACK=()
##################################################
fn pu { curDir=() newDir=() {
    if (~ $#* 0) {
        if (! ~ $#DIRSTACK 0) {
            curDir=$pwd
            newDir=$DIRSTACK(1)
            if (cd $newDir) {
                Shift DIRSTACK 1
                DIRSTACK=($curDir $DIRSTACK)
            }
        }
    } else if (~ $#* 1) {
        curDir=$pwd
        newDir=$1
        if (cd $newDir) {
            DIRSTACK=($curDir $DIRSTACK)
        }
    }
}}

##################################################
fn po { curDir=() newDir=() {
    if (~ $#DIRSTACK 0) {
        return
    }
    curDir=$pwd
    newDir=$DIRSTACK(1)
    if (cd $newDir) {
        Shift DIRSTACK 1
    }
}}

##################################################
fn dirs { curDir=() newDir=() n=0 d=() {
    echo $n $pwd
    for (d in $DIRSTACK) {
        let 'n=1+'$n
        echo $n $DIRSTACK($n)
    }
}}

##################################################
## rotd


