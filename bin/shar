#! /home/drazen/bin/rc

#####################################################################################
# End of 'here' document must be quoted since files might contain '$var'
#
#  Example: For file func.ca
#  $ cat func.c
#      #include <stdio.h>
#      int func(int n) {
#          return n+1;
#      }
#  The following is the file generated by shar on the standard output
#  $ shar func.c
#      #######  func.c #####
#      sed -e 's/^/XXX_1_/' > x.c << '_EOF_1_'
#      XXXX_3_#include <stdio.h>
#      XXXX_3_int func(int n) {
#      XXXX_3_    return n+1;
#      XXXX_3_}
#      _EOF_1_
#
#####################################################################################


q=''''
sep='###########################'

#####################################################################################
fn ProcessFile { file=$1 n=$2 eof=() pfx=() sedcmd=() sed_file2shar=() sed_shar2file=() {
    eof           = '_EOF_'$n'_'                     ## EOF marker
    qeof          = $q$eof$q
    pfx           = 'XXX_'$n'_'

    sed_shar2file = 's/^/'$pfx'/'                    ## Add prefix for shar
    sed_file2shar = $q's/'$pfx'//'$q                 ## Remove prefix for unshar

    echo $sep '  ' '<'$file'>'  '  ' $sep
    echo sed -e $sed_file2shar '>'  $q$file$q '<<' $qeof  ## unshar: remove prefix XXX_<N> to eof _EOF_<N>_
         sed -e $sed_shar2file  <  $file             ## shar: add prefix to file: XXX_<N>
    echo $eof                                        ## _EOF_<N>_

    echo
}}

#####################################################################################
n=1

for (f) {
    ProcessFile $f $n
    calc n=$n+1
}

#####################################################################################

